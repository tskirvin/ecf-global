#!/usr/bin/python3
# yumcache-build-from-cache - create /var/cache/ecf-global/package.log
# and /var/cache/ecf-global/yum-security.log, based on the pre-existing
# /var/cache/ecf-global/yum-cache.log (generated by yumcache-cache)

#########################################################################
### Configuration #######################################################
#########################################################################

CONFIG = '/etc/ecf-global/yum-cache.yaml'
CACHE_LOG = '/var/cache/ecf-global/yum-cache.log'
CACHE_STATUS = '/var/cache/ecf-global/yum-cache.status'

CACHE_PKG = 'package.log'
CACHE_SEC = 'security.log'

#########################################################################
### Declarations ########################################################
#########################################################################

import datetime, optparse, re, sys, time, yaml

#########################################################################
### Subroutines #########################################################
#########################################################################

def config_yaml(config_file):
    global config

    try:
        config = yaml.load(open(config_file, 'r'))
    except IOError as exc:
        print("file error: %s" % (exc))
        sys.exit(2)
    except yaml.YAMLError as exc:
        print("YAML error: %s" % (exc))
        sys.exit(2)
    except Exception as exc:
        print("unknown error: %s" % (exc))
        sys.exit(2)

def load_packages(file):
    try:
        f = open(file, 'r')
    except Exception:
        # File does not exist.  This isn't the end of the world
        return {}

    pkglist = {}
    for line in f.readlines():
        line = line.rstrip()
        newline = line.split('|')
        pkglist[newline[0]] = datetime.datetime(*(time.strptime(newline[1], '%Y-%m-%d')[0:6]))
    f.close()
    return pkglist

def write_packages(file, pkglist):
    f = open(file, 'w')
    for key in sorted(pkglist.keys()):
        f.write("%s|%s" % (key, datetime.datetime.strftime(pkglist[key], '%Y-%m-%d')))
    f.close()

def add_or_update(pkglist, packagename):
    if not get_package_age(pkglist, packagename):
        pkglist[packagename] = datetime.datetime.now()

def get_package_age(pkglist, packagename):
    if packagename in pkglist:
        return pkglist[packagename]
    return False

def clean_old_packages(pkglist, newpackagelist):
    '''
    Compare old package list to results of yum check-update.  Any packages
    no longer pending, i.e., not in yum check-update should be removed
    from the packagelist before it is processed or written back to disk.
    '''
    for key in list(pkglist.keys()):
        found = False
        if opt.debug: print("Checking old package key: %s " % (key))
        for element in newpackagelist:
            if opt.debug: print("Comparing element: %s to old key: %s" % (element, key))
            if key == element:
                if opt.debug: print("FOUND")
                found = True
        # if not found, the package must have been installed, so remove
        # from cache list
        if not found:
            del pkglist[key]

def get_yum_updates(logfile):
    """
    Parse the output of 'yum check-update' (already logged to a file) for
    packages to be installed.  Returns two arrays: a list of all packages,
    and a list of security-related packages.
    """
    pkglist = []
    seclist = []

    for line in iter(open(logfile, 'r')):
        line = line.rstrip()
        a = line.split()
        if len(a) == 3:
            packagename = a[0] + '-' + a[1]
            repo = a[2]
            pkglist.append(packagename)
            if re.match('.*security.*', repo):
                seclist.append(packagename)

    return pkglist, seclist

def confirmStatus(file):
    """
    Only continue if the status in the status file is either 0 or 100 (the
    only valid exit codes for a 'successful' yum check-update).
    """
    try:
        f = open(file, 'r')
        line = f.readline().rstrip()
        if line == '0':
            return True
        elif line == '100':
            return True
        else:
            raise Exception("yum check-update returned '%s'" % line)
    except Exception as e:
        print(e)
        sys.exit(-1)


#########################################################################
### main () #############################################################
#########################################################################

def main():
    usage = "%prog"
    p = optparse.OptionParser(usage=usage,
        description="update the yum package caches")
    p.add_option('--debug', dest='debug', action='store_true',
        help='set to print debugging information')
    p.add_option('--yum_cache_log', dest='yum_cache_log', action='store',
        default=CACHE_LOG,
        help='yum check-update cache file to load; default: %default')
    p.add_option('--yum_status_log', dest='yum_status_log', action='store',
        default=CACHE_STATUS,
        help='yum check-update status file to load; default: %default')
    p.add_option('--config', dest='config', action='store',
        default=CONFIG, help='config file to load; default: %default')

    global opt
    opt, args = p.parse_args()

    config_yaml(opt.config)
    confirmStatus(opt.yum_status_log)

    (pending_pkg, pending_sec) = get_yum_updates(opt.yum_cache_log)

    pkgfile = '%s/%s' % (config['cachedir'], CACHE_PKG)
    pkg = load_packages(pkgfile)
    clean_old_packages(pkg, pending_pkg)
    for packagename in pending_pkg:
        add_or_update(pkg, packagename)
    write_packages(pkgfile, pkg)

    secfile = '%s/%s' % (config['cachedir'], CACHE_SEC)
    sec = load_packages(secfile)
    clean_old_packages(sec, pending_sec)
    for packagename in pending_sec:
        add_or_update(sec, packagename)
    write_packages(secfile, sec)

if __name__ == "__main__":
    main()
